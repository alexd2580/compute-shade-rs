#version 450

// TODO
// look into this:
// https://computergraphics.stackexchange.com/questions/9956/performance-of-compute-shaders-vs-fragment-shaders-for-deferred-rendering

layout(local_size_x=8, local_size_y=8) in;

layout(push_constant, std140) uniform PushConstants {
  layout(offset = 4) bool bool_value;
  layout(offset = 8) float float_value;
} constants;

layout(rgba32f, binding=0) uniform image2D present;

// layout(rgba32f, binding = 1) uniform image2D image;
// layout(rgba32f, binding = 2) uniform image2D image_prev;

layout(std140, binding=1) uniform Globals {
    int size_1;
};

layout(std140, binding=2) uniform NamedGlobals {
    int size_2;
} globals;

layout(binding=3) buffer IntBuffer {
    int int_data[];
} buffer_1;

layout(binding=4) buffer FloatBuffer {
    float float_data[];
};

// Macro invocations need to be terminated with `;`.... even if a `;` is not
// necessary. This is a workaround for a bug in phaazon/glsl which is used to
// parse and analyze the shader IO.
// For reference see: https://github.com/phaazon/glsl/issues/148
#define A(b, c) \
    ivec2 c = ivec2(b);

void main() {
    // ivec2 ipixel_coords = ivec2(gl_GlobalInvocationID.st);
    A(gl_GlobalInvocationID.st, ipixel_coords);
    ivec2 iimage_size = ivec2(gl_NumWorkGroups.st * gl_WorkGroupSize.st);

    int buffer_size = size_1 + globals.size_2;

    int pixel_index = ipixel_coords.t * iimage_size.s + ipixel_coords.s;
    int int_val = buffer_1.int_data[ipixel_coords.s % buffer_size];
    float float_val = float_data[ipixel_coords.t % buffer_size];

    vec2 uv = vec2(ipixel_coords) / vec2(iimage_size);
    vec3 color = vec3(float_val, constants.bool_value ? constants.float_value : 0.0, float(int_val) / 100);
    imageStore(present, ipixel_coords, vec4(color, 1));
    return;

    // vec3 add_color = fract(constants.frame_index * 0.1203948230 * vec3(float(ipixel_coords.x) / iimage_size.x, float(ipixel_coords.y) / iimage_size.y, 0));
    // vec3 load_color = imageLoad(present, ipixel_coords).rgb;
    //
    // if (constants.frame_index % 60 < 60) {
    //     imageStore(present, ipixel_coords, vec4(add_color, 1));
    // } else {
    //     imageStore(present, ipixel_coords, vec4(load_color, 1));
    // }
}
